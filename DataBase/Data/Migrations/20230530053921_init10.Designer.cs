// <auto-generated />
using System;
using Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBase.Data.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20230530053921_init10")]
    partial class init10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Database.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Database.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CMND")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Database.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Database.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Database.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Database.Models.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataBase.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Blog");

                    b.HasIndex("PosterId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("DataBase.Models.BlogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_BlogType");

                    b.ToTable("BlogType", (string)null);
                });

            modelBuilder.Entity("DataBase.Models.BlogTypeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("BlogTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_BlogTypeDetail");

                    b.HasIndex("BlogTypeId");

                    b.ToTable("BlogTypeDetail", (string)null);
                });

            modelBuilder.Entity("DataBase.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Database.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("AmountUse")
                        .HasColumnType("int");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("DiscountPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19,2)")
                        .HasDefaultValueSql("0");

                    b.Property<int>("DiscountTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsPermanent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC078ED86676");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex(new[] { "DiscountCode" }, "Discount_DiscountCode")
                        .IsUnique();

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("Database.Models.DiscountReservationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC076173384A");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ReservationId");

                    b.ToTable("DiscountReservationDetail", (string)null);
                });

            modelBuilder.Entity("Database.Models.DiscountRoomDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC0780B8A9E7");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("RoomId");

                    b.ToTable("DiscountRoomDetail", (string)null);
                });

            modelBuilder.Entity("Database.Models.DiscountServiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC07F7AD559D");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DiscountServiceDetail", (string)null);
                });

            modelBuilder.Entity("Database.Models.DiscountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC070D2B3684");

                    b.HasIndex(new[] { "Name" }, "DiscountType_Name")
                        .IsUnique();

                    b.ToTable("DiscountType", (string)null);
                });

            modelBuilder.Entity("Database.Models.InvoiceReservation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PayAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PriceReservedRoom")
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal?>("PriceService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("SelfPay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id")
                        .HasName("PK__InvoiceR__3214EC07A70F1055");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("InvoiceReservation", (string)null);
                });

            modelBuilder.Entity("Database.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_Notification");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Database.Models.OrderService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,2)");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ServiceRoomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__OrderSer__3214EC07E6ACBE95");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ServiceRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderService", (string)null);
                });

            modelBuilder.Entity("Database.Models.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("NumberOfDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("1.0");

                    b.Property<int?>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReservationPrice")
                        .HasColumnType("decimal(19,2)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("RoomPrice")
                        .HasColumnType("decimal(19,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__Reservat__3214EC075152009A");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("Database.Models.ReservationChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdFather")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("ntext");

                    b.Property<string>("ReceiveUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("SendAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SendUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Reservat__3214EC073328611D");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationChat", (string)null);
                });

            modelBuilder.Entity("Database.Models.ReservationPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19,2)")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id")
                        .HasName("PK__Reservat__3214EC07950B4BF3");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("ReservationPayment", (string)null);
                });

            modelBuilder.Entity("Database.Models.Room", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<decimal?>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19,2)")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("('true')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberOfDoubleBed")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSimpleBed")
                        .HasColumnType("int");

                    b.Property<int>("PeopleNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomPicture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomPictures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StarAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("StarSum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("StarValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Room__3214EC078410FF00");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex(new[] { "Name" }, "Room_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "RoomNumber" }, "Room_RoomNumber")
                        .IsUnique();

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("Database.Models.RoomStar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__RoomStar__3214EC0789A3F679");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomStar", (string)null);
                });

            modelBuilder.Entity("Database.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__RoomType__3214EC078A6FFBFF");

                    b.HasIndex(new[] { "TypeName" }, "RoomType_TypeName")
                        .IsUnique();

                    b.ToTable("RoomType", (string)null);
                });

            modelBuilder.Entity("Database.Models.ServiceAttach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__ServiceA__3214EC07B90411A4");

                    b.HasIndex(new[] { "Name" }, "ServiceAttach_Name")
                        .IsUnique();

                    b.ToTable("ServiceAttach", (string)null);
                });

            modelBuilder.Entity("Database.Models.ServiceAttachDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceAttachId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__ServiceA__3214EC0770EA377F");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("ServiceAttachId", "RoomTypeId")
                        .IsUnique();

                    b.ToTable("ServiceAttachDetail", (string)null);
                });

            modelBuilder.Entity("Database.Models.ServiceRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Picture")
                        .HasColumnType("ntext");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19,2)")
                        .HasDefaultValueSql("0");

                    b.Property<decimal?>("PriceDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19,2)")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id")
                        .HasName("PK__ServiceR__3214EC077BECCD82");

                    b.HasIndex(new[] { "Name" }, "ServiceRoom_Name")
                        .IsUnique();

                    b.ToTable("ServiceRoom", (string)null);
                });

            modelBuilder.Entity("Database.Models.TokenInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Usename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TokenInfo", (string)null);
                });

            modelBuilder.Entity("Database.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Database.Models.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Database.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Database.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataBase.Models.Blog", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Poster")
                        .WithMany("Blogs")
                        .HasForeignKey("PosterId")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_AspNetUsers");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("DataBase.Models.BlogTypeDetail", b =>
                {
                    b.HasOne("DataBase.Models.Blog", "Blog")
                        .WithMany("BlogTypeDetails")
                        .HasForeignKey("BlogTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_BlogTypeDetail_Blog");

                    b.HasOne("DataBase.Models.BlogType", "BlogType")
                        .WithMany("BlogTypeDetails")
                        .HasForeignKey("BlogTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_BlogTypeDetail_BlogType");

                    b.Navigation("Blog");

                    b.Navigation("BlogType");
                });

            modelBuilder.Entity("Database.Models.Discount", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Creator")
                        .WithMany("Discounts")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK_Discount_AspNetUsers");

                    b.HasOne("Database.Models.DiscountType", "DiscountType")
                        .WithMany("Discounts")
                        .HasForeignKey("DiscountTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Discount_DiscountType");

                    b.Navigation("Creator");

                    b.Navigation("DiscountType");
                });

            modelBuilder.Entity("Database.Models.DiscountReservationDetail", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Creator")
                        .WithMany("DiscountReservationDetails")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountReservationDetail_AspNetUsers");

                    b.HasOne("Database.Models.Discount", "Discount")
                        .WithMany("DiscountReservationDetails")
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountReservationDetail_Discount");

                    b.HasOne("Database.Models.Reservation", "Reservation")
                        .WithMany("DiscountReservationDetails")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountReservationDetai_Reservation");

                    b.Navigation("Creator");

                    b.Navigation("Discount");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Database.Models.DiscountRoomDetail", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Creator")
                        .WithMany("DiscountRoomDetails")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountRoomDetail_AspNetUsers");

                    b.HasOne("Database.Models.Discount", "Discount")
                        .WithMany("DiscountRoomDetails")
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountRoomDetail_Discount");

                    b.HasOne("Database.Models.Room", "Room")
                        .WithMany("DiscountRoomDetails")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountRoomDetail_Room");

                    b.Navigation("Creator");

                    b.Navigation("Discount");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Database.Models.DiscountServiceDetail", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Creator")
                        .WithMany("DiscountServiceDetails")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountService_AspNetUsers");

                    b.HasOne("Database.Models.Discount", "Discount")
                        .WithMany("DiscountServiceDetails")
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountServiceDetail_Discount");

                    b.HasOne("Database.Models.ServiceRoom", "Service")
                        .WithMany("DiscountServiceDetails")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_DiscountServiceDetail_ServiceRoom");

                    b.Navigation("Creator");

                    b.Navigation("Discount");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Database.Models.InvoiceReservation", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "Creator")
                        .WithMany("InvoiceReservations")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceReservation_ApplicationUser");

                    b.HasOne("Database.Models.Reservation", "Reservation")
                        .WithOne("InvoiceReservation")
                        .HasForeignKey("Database.Models.InvoiceReservation", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Database.Models.Notification", b =>
                {
                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Models.OrderService", b =>
                {
                    b.HasOne("Database.Models.Reservation", "Reservation")
                        .WithMany("OrderServices")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderService_Reservation");

                    b.HasOne("Database.Models.ServiceRoom", "ServiceRoom")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceRoomId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderService_ServiceRoom");

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany("OrderServices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderService_AspNetUsers");

                    b.Navigation("Reservation");

                    b.Navigation("ServiceRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Models.Reservation", b =>
                {
                    b.HasOne("Database.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Room");

                    b.HasOne("Database.Models.ApplicationUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_AspNetUsers");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Models.ReservationChat", b =>
                {
                    b.HasOne("Database.Models.Reservation", "Reservation")
                        .WithMany("ReservationChats")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationChat_Reservation");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Database.Models.ReservationPayment", b =>
                {
                    b.HasOne("Database.Models.Reservation", "Reservation")
                        .WithOne("ReservationPayment")
                        .HasForeignKey("Database.Models.ReservationPayment", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Database.Models.Room", b =>
                {
                    b.HasOne("Database.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Room_RoomType");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Database.Models.RoomStar", b =>
                {
                    b.HasOne("Database.Models.Room", "Room")
                        .WithMany("RoomStars")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomStar_Room");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Database.Models.ServiceAttachDetail", b =>
                {
                    b.HasOne("Database.Models.RoomType", "RoomType")
                        .WithMany("ServiceAttachDetails")
                        .HasForeignKey("RoomTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceAttachDetail_RoomType");

                    b.HasOne("Database.Models.ServiceAttach", "ServiceAttach")
                        .WithMany("ServiceAttachDetails")
                        .HasForeignKey("ServiceAttachId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceAttachDetail_ServiceAttach");

                    b.Navigation("RoomType");

                    b.Navigation("ServiceAttach");
                });

            modelBuilder.Entity("Database.Models.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Database.Models.ApplicationUser", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Claims");

                    b.Navigation("DiscountReservationDetails");

                    b.Navigation("DiscountRoomDetails");

                    b.Navigation("DiscountServiceDetails");

                    b.Navigation("Discounts");

                    b.Navigation("InvoiceReservations");

                    b.Navigation("Logins");

                    b.Navigation("Notifications");

                    b.Navigation("OrderServices");

                    b.Navigation("Reservations");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DataBase.Models.Blog", b =>
                {
                    b.Navigation("BlogTypeDetails");
                });

            modelBuilder.Entity("DataBase.Models.BlogType", b =>
                {
                    b.Navigation("BlogTypeDetails");
                });

            modelBuilder.Entity("Database.Models.Discount", b =>
                {
                    b.Navigation("DiscountReservationDetails");

                    b.Navigation("DiscountRoomDetails");

                    b.Navigation("DiscountServiceDetails");
                });

            modelBuilder.Entity("Database.Models.DiscountType", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("Database.Models.Reservation", b =>
                {
                    b.Navigation("DiscountReservationDetails");

                    b.Navigation("InvoiceReservation")
                        .IsRequired();

                    b.Navigation("OrderServices");

                    b.Navigation("ReservationChats");

                    b.Navigation("ReservationPayment")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.Room", b =>
                {
                    b.Navigation("DiscountRoomDetails");

                    b.Navigation("Reservations");

                    b.Navigation("RoomStars");
                });

            modelBuilder.Entity("Database.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("ServiceAttachDetails");
                });

            modelBuilder.Entity("Database.Models.ServiceAttach", b =>
                {
                    b.Navigation("ServiceAttachDetails");
                });

            modelBuilder.Entity("Database.Models.ServiceRoom", b =>
                {
                    b.Navigation("DiscountServiceDetails");

                    b.Navigation("OrderServices");
                });
#pragma warning restore 612, 618
        }
    }
}
